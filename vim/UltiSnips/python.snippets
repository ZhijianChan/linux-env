priority -40

snippet path "from pathlib import Path" b
from pathlib import Path
endsnippet

snippet cd "current directory" b
cur_dir = Path(__file__).resolve().parent
endsnippet

snippet wd "working directory" b
working_dir = Path(__file__).resolve().parent
endsnippet

snippet docopt "docopt command args" b
from docopt import docopt
cmd_args = docopt(__doc__, version='1.0')
endsnippet

snippet access "Access headers" b
headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Access-Control-Allow-Methods': 'PUT,POST,GET,DELETE,OPTIONS'
}
endsnippet


# =================================================================================================
# Sanic snippets
# =================================================================================================

snippet sanic_template "Sanic server template" b
#!/usr/bin/env python3
'''
Usage:
    ${1}

Option:
    ${2}
'''
import os
import time
import logging
import asyncio
from sanic import response, Sanic

app = Sanic(__name__, configure_logging=False)


@app.get(r'/')
async def index_handler(request):
    return response.redirect('/api/doc')


@app.middleware('request')
async def modify_request(request):
    request['__START_TIME__'] = time.time()


@app.middleware('response')
async def modify_response(request, response):
    status = response.status if response else None
    spend_time = round((time.time() - request['__START_TIME__']) * 1000)
    ip = request.remote_addr if request.remote_addr else request.ip
    logging.info('Access method: %s uri: %s status: %s ip: %s time: %sms'
                 % (request.method, request.path, status, ip, spend_time))


@app.listener('before_server_start')
async def before_server_start(app, loop):
    from swagger_ui import sanic_api_doc
    sanic_api_doc(app, config_path=${3:SWAGGER_CONFIG_PATH}, title='api_doc')
    logging.info('[server_listening] pid: %s port: %s' % (os.getpid(), cmd_args['--port']))


if __name__ == '__main__':
    from docopt import docopt
    cmd_args = docopt(__doc__, version='1.0')

    working_dir = os.path.dirname(os.path.abspath(__file__))

    import uvloop
    asyncio.set_event_loop(uvloop.new_event_loop())

    asyncio.set_event_loop(uvloop.new_event_loop())
    app.run(host='0.0.0.0', port=int(cmd_args['--port']), access_log=False)
    logging.info('[server_exit]')
endsnippet

snippet sanic_br "Sanic before request and response function" b
@app.middleware('request')
async def modify_request(request):
    request['__START_TIME__'] = time.time()


@app.middleware('response')
async def modify_response(request, response):
    status = response.status if response else None
    spend_time = round((time.time() - request['__START_TIME__']) * 1000)
    ip = request.remote_addr if request.remote_addr else request.ip
    logging.info('Access method: %s uri: %s status: %s ip: %s time: %sms'
                 % (request.method, request.path, status, ip, spend_time))
endsnippet

snippet sanic_bs "Sanic before server start running function" b
@app.listener('before_server_start')
async def before_server_start(app, loop):
    from swagger_ui import sanic_api_doc
    sanic_api_doc(app, config_path=${1:SWAGGER_CONFIG_PATH}, title='api_doc')
    logging.info('[server_listening] pid: %s port: %s' % (os.getpid(), cmd_args['--port']))
endsnippet

# vim:ft=snippets:
